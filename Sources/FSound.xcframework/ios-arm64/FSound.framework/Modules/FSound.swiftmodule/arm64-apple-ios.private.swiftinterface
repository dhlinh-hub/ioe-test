// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FSound
import AVFAudio
import AVFoundation
import Darwin
@_exported import FSound
import Foundation
import MobileCoreServices
import Swift
import TensorFlowLiteC
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum SignatureRunnerError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToCreateSignatureRunner(signatureKey: Swift.String)
  case failedToGetTensor(tensorType: Swift.String, nameInSignature: Swift.String)
  case failedToResizeInputTensor(inputName: Swift.String)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case failedToInvokeSignature(signatureKey: Swift.String)
  case allocateTensorsRequired
  public static func == (a: FSound.SignatureRunnerError, b: FSound.SignatureRunnerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FSound.SignatureRunnerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension FSound.SignatureRunnerError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class FSoundError : Foundation.NSError {
  @objc public init(code: Swift.Int, message: Swift.String)
  @objc deinit
}
public struct Tensor : Swift.Equatable, Swift.Hashable {
  public let name: Swift.String
  public let dataType: FSound.Tensor.DataType
  public let shape: FSound.Tensor.Shape
  public let data: Foundation.Data
  public let quantizationParameters: FSound.QuantizationParameters?
  public static func == (a: FSound.Tensor, b: FSound.Tensor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FSound.Tensor {
  public enum DataType : Swift.Equatable, Swift.Hashable {
    case bool
    case uInt8
    case int16
    case int32
    case int64
    case float16
    case float32
    case float64
    public static func == (a: FSound.Tensor.DataType, b: FSound.Tensor.DataType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension FSound.Tensor {
  public struct Shape : Swift.Equatable, Swift.Hashable {
    public let rank: Swift.Int
    public let dimensions: [Swift.Int]
    public init(_ dimensions: [Swift.Int])
    public init(_ elements: Swift.Int...)
    public static func == (a: FSound.Tensor.Shape, b: FSound.Tensor.Shape) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension FSound.Tensor.Shape : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: Swift.Int...)
  public typealias ArrayLiteralElement = Swift.Int
}
public struct QuantizationParameters : Swift.Equatable, Swift.Hashable {
  public let scale: Swift.Float
  public let zeroPoint: Swift.Int
  public static func == (a: FSound.QuantizationParameters, b: FSound.QuantizationParameters) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum InterpreterError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorIndex(index: Swift.Int, maxIndex: Swift.Int)
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToLoadModel
  case failedToCreateInterpreter
  case failedToResizeInputTensor(index: Swift.Int)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case allocateTensorsRequired
  case invokeInterpreterRequired
  case tensorFlowLiteError(Swift.String)
  public static func == (a: FSound.InterpreterError, b: FSound.InterpreterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FSound.InterpreterError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension FSound.InterpreterError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FTechIOEManager : ObjectiveC.NSObject {
  public static func instance() -> FSound.FTechIOEManager
  weak public var delegate: (any FSound.FTechIOEManagerDelegate)?
  public func initRecord(appId: Swift.String, key: Swift.String)
  public func startRecord(referenceText: Swift.String, languageAccent: Swift.String? = nil, extraData: Swift.String? = nil)
  public func stopRecord()
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class StopRecordIOEResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let requestId: Swift.String
  @objc final public let scoreData: FSound.ScoreData
  @objc final public let minioLink: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class ScoreData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let accuracyScore: Swift.Int
  @objc final public let processingTime: Swift.Double
  @objc final public let wordsPerMin: Swift.Int
  @objc final public let fluencyScore: Swift.String
  @objc final public let speakingDuration: Swift.Int
  @objc final public let userPhoneme: Swift.String
  @objc final public let wordsScoreDetail: [FSound.WordsScoreDetail]
  @objc final public let phonemeScoreStatistics: [FSound.PhonemeScoreStatistic]
  @objc final public let requestId: Swift.String
  @objc final public let kenlmLog: FSound.KenlmLog
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class KenlmLog : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let requestId: Swift.String
  @objc final public let referenceText: Swift.String
  @objc final public let userPhoneme: Swift.String
  @objc final public let accuracyScore: Swift.Int
  @objc final public let latency: Swift.Double
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum MeanScoreEnum : Swift.String, Swift.Codable {
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @objcMembers public class PhonemeScoreStatistic : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let groupName: [Swift.String]
  @objc final public let phones: [Swift.String]
  @objc final public let score: [Swift.Int]
  final public let meanScore: FSound.MeanScoreUnion
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum MeanScoreUnion : Swift.Codable {
  case enumeration(FSound.MeanScoreEnum)
  case integer(Swift.Int)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @objcMembers public class WordsScoreDetail : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let word: Swift.String
  @objc final public let phonemeWord: Swift.String
  @objc final public let accuracyScore: Swift.Int
  @objc final public let phonemesScoreDetail: [FSound.PhonemesScoreDetail]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class PhonemesScoreDetail : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let phoneme: Swift.String?
  final public let accuracyScore: Swift.Int?
  @objc final public let audioLink: Swift.String?
  @objc final public let descriptions: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public protocol FTechIOEManagerDelegate {
  @objc optional func initRecord(success: Swift.Bool)
  @objc optional func onStart()
  @objc optional func onRecording()
  @objc optional func onFailure(error: FSound.FSoundError)
  @objc optional func onCompletionRecord(data: FSound.StopRecordIOEResponse)
}
@_hasMissingDesignatedInitializers final public class Interpreter {
  final public let options: FSound.Interpreter.Options?
  final public let delegates: [any FSound.Delegate]?
  final public var inputTensorCount: Swift.Int {
    get
  }
  final public var outputTensorCount: Swift.Int {
    get
  }
  final public var signatureKeys: [Swift.String] {
    get
  }
  convenience public init(modelPath: Swift.String, options: FSound.Interpreter.Options? = nil, delegates: [any FSound.Delegate]? = nil) throws
  convenience public init(modelData: Foundation.Data, options: FSound.Interpreter.Options? = nil, delegates: [any FSound.Delegate]? = nil) throws
  @objc deinit
  final public func invoke() throws
  final public func input(at index: Swift.Int) throws -> FSound.Tensor
  final public func output(at index: Swift.Int) throws -> FSound.Tensor
  final public func resizeInput(at index: Swift.Int, to shape: FSound.Tensor.Shape) throws
  @discardableResult
  final public func copy(_ data: Foundation.Data, toInputAt index: Swift.Int) throws -> FSound.Tensor
  final public func allocateTensors() throws
  final public func signatureRunner(with key: Swift.String) throws -> FSound.SignatureRunner
}
extension FSound.Interpreter {
  public struct Options : Swift.Equatable, Swift.Hashable {
    public var threadCount: Swift.Int?
    public var isXNNPackEnabled: Swift.Bool
    public init()
    public static func == (a: FSound.Interpreter.Options, b: FSound.Interpreter.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(*, deprecated, renamed: "Interpreter.Options")
public typealias InterpreterOptions = FSound.Interpreter.Options
@_hasMissingDesignatedInitializers final public class SignatureRunner {
  final public let signatureKey: Swift.String
  final public var inputs: [Swift.String] {
    get
  }
  final public var outputs: [Swift.String] {
    get
  }
  @objc deinit
  final public func invoke(with inputs: [Swift.String : Foundation.Data]) throws
  final public func input(named name: Swift.String) throws -> FSound.Tensor
  final public func output(named name: Swift.String) throws -> FSound.Tensor
  final public func resizeInput(named name: Swift.String, toShape shape: FSound.Tensor.Shape) throws
  final public func copy(_ data: Foundation.Data, toInputNamed name: Swift.String) throws
  final public func allocateTensors() throws
}
public protocol SoundClassifierDelegate : AnyObject {
  func soundClassifier(_ soundClassifier: FSound.SoundClassifier, didInterpreteProbabilities probabilities: [Swift.Float32])
}
public class SoundClassifier {
  weak public var delegate: (any FSound.SoundClassifierDelegate)?
  public init(modelFileName: Swift.String, modelFileExtension: Swift.String = "tflite", labelFilename: Swift.String = "labels", labelFileExtension: Swift.String = "txt", delegate: (any FSound.SoundClassifierDelegate)? = nil)
  public func start(inputBuffer: [Swift.Int16])
  @objc deinit
}
public enum Runtime {
  public static var version: Swift.String {
    get
  }
}
public protocol Delegate : AnyObject {
  typealias CDelegate = Swift.UnsafeMutablePointer<TensorFlowLiteC.TfLiteDelegate>
  var cDelegate: Self.CDelegate { get }
}
public enum HTTPStatusCode : Swift.Int, Swift.Error {
  case `continue`
  case switchingProtocols
  case processing
  case ok
  case created
  case accepted
  case nonAuthoritativeInformation
  case noContent
  case resetContent
  case partialContent
  case multiStatus
  case alreadyReported
  case IMUsed
  case multipleChoices
  case movedPermanently
  case found
  case seeOther
  case notModified
  case useProxy
  case switchProxy
  case temporaryRedirect
  case permenantRedirect
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case proxyAuthenticationRequired
  case requestTimeout
  case conflict
  case gone
  case lengthRequired
  case preconditionFailed
  case payloadTooLarge
  case URITooLong
  case unsupportedMediaType
  case rangeNotSatisfiable
  case expectationFailed
  case teapot
  case misdirectedRequest
  case unprocessableEntity
  case locked
  case failedDependency
  case upgradeRequired
  case preconditionRequired
  case tooManyRequests
  case requestHeaderFieldsTooLarge
  case noResponse
  case unavailableForLegalReasons
  case SSLCertificateError
  case SSLCertificateRequired
  case HTTPRequestSentToHTTPSPort
  case clientClosedRequest
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case HTTPVersionNotSupported
  case variantAlsoNegotiates
  case insufficientStorage
  case loopDetected
  case notExtended
  case networkAuthenticationRequired
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension FSound.MeanScoreEnum : Swift.Equatable {}
extension FSound.MeanScoreEnum : Swift.Hashable {}
extension FSound.MeanScoreEnum : Swift.RawRepresentable {}
extension FSound.HTTPStatusCode : Swift.Equatable {}
extension FSound.HTTPStatusCode : Swift.Hashable {}
extension FSound.HTTPStatusCode : Swift.RawRepresentable {}
